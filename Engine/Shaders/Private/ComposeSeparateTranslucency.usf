// Copyright Epic Games, Inc. All Rights Reserved.

#include "Common.ush"

float4 SeparateTranslucencyBilinearUVMinMax;


Texture2D SceneColor;
SamplerState SceneColorSampler;

Texture2D SeparateTranslucency;
SamplerState SeparateTranslucencySampler;

Texture2D SeparateModulation;
SamplerState SeparateModulationSampler;

float2 LowResExtentInverse;

#if PERMUTATION_NEARESTDEPTHNEIGHBOR 

#include "SeparateTranslucency.ush"

#endif // PERMUTATION_NEARESTDEPTHNEIGHBOR

void MainPS(
	float4 SvPosition : SV_POSITION,
	out float4 OutColor : SV_Target0)
{
	float2 BufferUV = SvPosition.xy * View.BufferSizeAndInvSize.zw;

	float4 SceneColorSample = SceneColor.SampleLevel(SceneColorSampler, BufferUV, 0);

#if PERMUTATION_NEARESTDEPTHNEIGHBOR 

	float2 SeparateTranslucencyBufferUV = clamp(BufferUV, SeparateTranslucencyBilinearUVMinMax.xy, SeparateTranslucencyBilinearUVMinMax.zw);

	NearestDepthNeighborUpsamplingResult UpsampleResult = NearestDepthNeighborUpsampling(SvPosition.xy, BufferUV, LowResExtentInverse);

	float4 SeparateTranslucencySample = 0;
	float4 SeparateModulationSample = 0;
	if (UpsampleResult.bUsePointSampler)
	{
		SeparateTranslucencySample	= SeparateTranslucency.SampleLevel(	GlobalPointClampedSampler, UpsampleResult.UV, 0);
		SeparateModulationSample	= SeparateModulation.SampleLevel(	GlobalPointClampedSampler, UpsampleResult.UV, 0);
	}
	else
	{
		SeparateTranslucencySample	= SeparateTranslucency.SampleLevel(	GlobalBilinearClampedSampler, UpsampleResult.UV, 0);
		SeparateModulationSample	= SeparateModulation.SampleLevel(	GlobalBilinearClampedSampler, UpsampleResult.UV, 0);
	}

#else // PERMUTATION_NEARESTDEPTHNEIGHBOR

	float2 SeparateTranslucencyBufferUV = clamp(BufferUV, SeparateTranslucencyBilinearUVMinMax.xy, SeparateTranslucencyBilinearUVMinMax.zw);

	float4 SeparateTranslucencySample = SeparateTranslucency.SampleLevel(SeparateTranslucencySampler, SeparateTranslucencyBufferUV, 0);
	float4 SeparateModulationSample   = SeparateModulation.SampleLevel(	 SeparateModulationSampler, SeparateTranslucencyBufferUV, 0);

#endif // PERMUTATION_NEARESTDEPTHNEIGHBOR

	// Final composition
	OutColor.rgb = SceneColorSample.rgb * SeparateTranslucencySample.a * SeparateModulationSample.rgb + SeparateTranslucencySample.rgb;
	OutColor.a   = SceneColorSample.a   * SeparateTranslucencySample.a;

#if !POST_PROCESS_ALPHA
	OutColor.a = 0;
#endif
}
