// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#define HAIR_CONTROLPOINT_INSIDE 0
#define HAIR_CONTROLPOINT_START	1
#define HAIR_CONTROLPOINT_END	2

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Hair control points

struct FHairControlPoint
{
	float3 Position;
	float  WorldRadius;
	float  WorldLength;
	uint   Type;
};

FHairControlPoint UnpackHairControlPoint(
	uint4 InPackedData,
	float3 InVF_PositionOffset,
	float InVF_Radius,
	float InVF_Length)
{
	const uint PackedAlpha	= asuint(InPackedData.a);

	FHairControlPoint Out = (FHairControlPoint)0;
	Out.Position	= f16tof32(InPackedData.xyz) + InVF_PositionOffset;
	Out.WorldRadius	= ((PackedAlpha & 0x00FC) >> 2) / 63.f * InVF_Radius;
	Out.WorldLength	= ((PackedAlpha & 0xFF00) >> 8) / 255.f * InVF_Length;
	Out.Type		= PackedAlpha & 0x3;

	return Out;
}

bool IsValidHairStrandsSegment(const FHairControlPoint CP0, const FHairControlPoint CP1)
{
	return !(CP0.Type == HAIR_CONTROLPOINT_END && CP1.Type == HAIR_CONTROLPOINT_START);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Hair attributes

struct FHairAttributes
{
	float2 RootUV;
	float	Seed;
	float	UCoord;
};

FHairAttributes DecodeHairAttribute(uint4 Attributes)
{
	float2 RootUV, RootIndex;
	RootUV.x = float(Attributes.x & 0xFF) / 255.f;
	RootUV.y = 1.0 - (float((Attributes.x >> 8) & 0xFF) / 255.f); // Invert V to compensate image origin flip
	RootIndex.x = float(Attributes.z & 0xFF);
	RootIndex.y = float((Attributes.z >> 8) & 0xFF);

	FHairAttributes Out;
	Out.RootUV = RootUV + RootIndex;
	Out.UCoord = (Attributes.y & 0xFF) / 255.f;
	Out.Seed = ((Attributes.y >> 8) & 0xFF) / 255.f;
	return Out;
}