// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================================
	PathTracingSpotLight.ush: Light sampling functions for Spot light implementation
===============================================================================================*/

#pragma once

#include "PathTracingLightCommon.ush"
#include "PathTracingSpotLight.ush"

// #dxr_todo: These are stolen from DynamicLightingCommon.ush but I was having trouble getting that header to include cleanly
/** 
 * Calculates attenuation for a spot light.
 * L normalize vector to light. 
 * SpotDirection is the direction of the spot light.
 * SpotAngles.x is CosOuterCone, SpotAngles.y is InvCosConeDifference. 
 */
float SpotAttenuationMask(float3 L, float3 SpotDirection, float2 SpotAngles)
{
	return saturate((dot(L, -SpotDirection) - SpotAngles.x) * SpotAngles.y);
}
float SpotAttenuation(float3 L, float3 SpotDirection, float2 SpotAngles)
{
	float ConeAngleFalloff = Square(SpotAttenuationMask(L, SpotDirection, SpotAngles));
	return ConeAngleFalloff;
}


FLightHit SpotLight_TraceLight(RayDesc Ray, int LightId) {

	FLightHit Result = PointLight_TraceLight(Ray, LightId);
	if (Result.IsHit())
	{
		float3 LightPosition = GetPosition(LightId);
		float3 LightNormal = GetNormal(LightId);
		float2 CosConeAngles = GetCosConeAngles(LightId);
		Result.Radiance *= SpotAttenuation(-normalize(Ray.Origin - LightPosition), LightNormal, CosConeAngles);
	}
	return Result;
}

FLightSample SpotLight_SampleLight(
	int LightId,
	float2 RandSample,
	float3 WorldPos,
	float3 WorldNormal
)
{
	FLightSample Result = PointLight_SampleLight(LightId, RandSample, WorldPos, WorldNormal);

	float3 LightPosition = GetPosition(LightId);
	float3 LightNormal = GetNormal(LightId);
	float2 CosConeAngles = GetCosConeAngles(LightId);
	Result.RadianceOverPdf *= SpotAttenuation(-normalize(WorldPos - LightPosition), LightNormal, CosConeAngles);

	return Result;
}

float SpotLight_EstimateLight(
	int LightId,
	float3 WorldPos,
	float3 WorldNormal,
	bool IsTransmissiveMaterial
)
{
	float3 LightPosition = GetPosition(LightId);
	float3 LightNormal = GetNormal(LightId);
	float LightPower = Luminance(GetColor(LightId));
	float Radius = GetRadius(LightId);
	
	// Distance
	float3 LightDirection = GetPosition(LightId) - WorldPos;
	float LightDistanceSquared = dot(LightDirection, LightDirection);

	// Geometric term
	float NoL = 1.0; // trivial upper bound -- trying to be more accurate appears to reduce performance

	float Falloff = ComputeAttenuationFalloff(LightDistanceSquared, LightId);
	float OutIrradiance = LightPower * Falloff * NoL / LightDistanceSquared;
	
	float2 CosConeAngles = GetCosConeAngles(LightId);
	OutIrradiance *= SpotAttenuation(normalize(LightDirection), LightNormal, CosConeAngles);

	return OutIrradiance;
}

