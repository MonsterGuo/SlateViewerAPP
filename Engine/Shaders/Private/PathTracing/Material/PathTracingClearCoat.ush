// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================================
	PathTracingClearCoat.usf: Path tracing BRDF model for clear coat material
===============================================================================================*/

#pragma once

#define EVAL_TOP_LAYER 1
#define EVAL_BOTTOM_LAYER 1

#define GREY_INNER_LAYER 0

#define CLEAR_COAT_F0	0.04 // From hard-coded value in ShadingModels.ush

#include "PathTracingMaterialCommon.ush"
#include "PathTracingFresnel.ush"

float3 CalcThinTransmission(float NoL, float NoV, FMaterialClosestHitPayload Payload)
{
	float3 Transmission = 1.0;

	float AbsorptionMix = GetMetallic(Payload);
	if (AbsorptionMix > 0.0)
	{
		float LayerThickness = GetClearCoatThickness(Payload);
		float ThinDistance = LayerThickness * (rcp(NoV) + rcp(NoL));

		// Base color represents reflected color viewed at 0 incidence angle, after being absorbed through the substrate.
		// Because of this, extinction is normalized by traveling through layer thickness twice
		float3 TransmissionColor = Diffuse_Lambert(GetBaseColor(Payload) );
		float3 ExtinctionCoefficient = -log(TransmissionColor) / (2.0 * LayerThickness);
		float3 OpticalDepth = ExtinctionCoefficient * max(ThinDistance - 2.0 * LayerThickness, 0.0);
		Transmission = exp(-OpticalDepth);
		Transmission = lerp(1.0, Transmission, AbsorptionMix);
	}
	return Transmission;
}

float CalcClearCoatSelectionPdf(FMaterialClosestHitPayload Payload)
{
#if EVAL_TOP_LAYER == 0
	// never select coating if top is disabled
	return 0.0; 
#elif EVAL_BOTTOM_LAYER == 0
	// always select coating if bottom is disabled
	return 1.0; 
#endif
	// probability of choosing the coat
	// TODO: this could be improved if we had a directional albedo tabulation
	float Pdf = GetClearCoat(Payload) * CLEAR_COAT_F0;
	return Pdf;
}

float ClearCoatFresnel(float VoH) {
	// from hardcoded logic in ClearCoatBxDF
	float Fc = Pow5(1 - VoH);
	return Fc + (1 - Fc) * CLEAR_COAT_F0;
}

FMaterialEval ClearCoat_EvalMaterial(
	float3 IncomingDirection,
	float3 OutgoingDirection,
	inout FMaterialClosestHitPayload Payload
)
{
	FMaterialEval Result = NullMaterialEval();
	
	float3 V_World = -IncomingDirection;
	float3 L_World = OutgoingDirection;
	float3 N_World = GetWorldNormal(Payload);

	float CoatSelectionPdf = CalcClearCoatSelectionPdf(Payload);

	float2 Alpha = 0;
	float3x3 Basis = GetGGXBasis(GetClearCoatRoughness(Payload), Payload.WorldNormal, Alpha);

	// move vectors into right shading frame
	float3 V = mul(Basis, V_World);
	float3 L = mul(Basis, L_World);
	float3 H = normalize(V + L);

	float NoL = saturate(L.z);
	float NoV = saturate(V.z);
	float NoH = saturate(H.z);
	float VoH = saturate(dot(V, H));

	// Specular lobe
	const float2 GGXResult = GGXEvalReflection(L, V, H, Alpha);
	const float F = GetClearCoat(Payload) * ClearCoatFresnel(VoH);
	const float3 SpecWeight = F * GGXResult.x;
	const float SpecPdf = GGXResult.y;

	AddLobeWithMIS(Result.Weight, Result.Pdf, SpecWeight, SpecPdf, CoatSelectionPdf);
	

	// bottom-layer clear coat evaluation
	FMaterialEval BottomEval = NullMaterialEval();
	Payload.WorldNormal = GetClearCoatBottomNormal(Payload);
#if GREY_INNER_LAYER == 0
	// NOTE: Should we try to account for the IOR ratio between layers? We could try to darken Specular Color by the coating IOR
	// but this would apply to both the dielctric and metal portions equally ...
	// It seems better to punt until we have a Strata going
	BottomEval = DefaultLit_EvalMaterial(IncomingDirection, OutgoingDirection, Payload);
#else
	float3 OldColor = Payload.BaseColor;
	Payload.BaseColor = 0.18;
	BottomEval = Lambert_EvalMaterial(OutgoingDirection, Payload);
	Payload.BaseColor = OldColor;
#endif
	Payload.WorldNormal = N_World;

	// Calculate transmission through substrate
	float3 Transmission = CalcThinTransmission(NoL, NoV, Payload);

	// Apply fresnel through exit interface
	// TODO: This should actually use a measure of the directional albedo along V and L
	// TODO: The original implementation tried to refract V and L, but doing this correctly would require a stochastic eval method
	// NOTE: implementation in ClearCoatBxDF uses VoH for these which again makes the coating math dependent on the (stochastic) choice of H
	float CC_F1 = ClearCoatFresnel(NoV);
	float CC_F2 = ClearCoatFresnel(NoL);

	BottomEval.Weight *= lerp(1.0, Transmission * (1 - CC_F1) * (1 - CC_F2), GetClearCoat(Payload));

	AddLobeWithMIS(Result.Weight, Result.Pdf, BottomEval.Weight, BottomEval.Pdf, 1.0 - CoatSelectionPdf);

	return Result;
}

FMaterialSample ClearCoat_SampleMaterial(
	float3 RayDirection,
	FMaterialClosestHitPayload Payload,
	float4 RandSample
)
{
	float3 N_World = GetWorldNormal(Payload);
	float3 V_World = -RayDirection;

	float CoatSelectionPdf = CalcClearCoatSelectionPdf(Payload);

	// choose between coat and bottom layer
	float3 OutDirection = 0;
	float OutRoughness = 0;
	if (RandSample.x < CoatSelectionPdf)
	{
		RandSample.x /= CoatSelectionPdf;

		// No anisotropy, just pick an arbitrary basis
		float Roughness = max(GetClearCoatRoughness(Payload), GGX_MIN_ROUGHNESS);
		float2 Alpha = Roughness * Roughness;
		float3x3 Basis = GetTangentBasis(N_World);

		float3 V = -mul(Basis, RayDirection);

		// #dxr_todo: Switch to UniformSampleDiskConcentric after fixing 0/0 bug
		float3 H = ImportanceSampleVisibleGGX_aniso(UniformSampleDisk(RandSample.xy), Alpha, V).xyz;

		float3 L = reflect(-V, H);
		if (L.z <= 0)
		{
			// invalid output direction, skip some work
			return NullMaterialSample();
		}
		// reflect and transform
		OutDirection = mul(L, Basis);
		OutRoughness = Roughness;
	}
	else
	{
		RandSample.x -= CoatSelectionPdf;
		RandSample.x /= (1.0 - CoatSelectionPdf);

#if GREY_INNER_LAYER == 0
		float3 Weight = 0;
		float Pdf = 0;
		Payload.WorldNormal = GetClearCoatBottomNormal(Payload);
		FMaterialSample InnerSample = DefaultLit_SampleMaterial(RayDirection, Payload, RandSample);
		Payload.WorldNormal = N_World;

		OutDirection = InnerSample.Direction;
		OutRoughness = InnerSample.Roughness;
#else
		float3 Nb = GetClearCoatBottomNormal(Payload);
		OutDirection = TangentToWorld(CosineSampleHemisphere(RandSample.xy).xyz, Nb);
		OutRoughness = 1.0;
#endif
	}

	// defer to eval for now to get proper MIS mix of both events
	// TODO: could use temporary results above to inline Eval logic here
	FMaterialEval Result = ClearCoat_EvalMaterial(RayDirection, OutDirection, Payload);
	return CreateMaterialSample(OutDirection, Result.Weight, Result.Pdf, 1.0, OutRoughness);
}
