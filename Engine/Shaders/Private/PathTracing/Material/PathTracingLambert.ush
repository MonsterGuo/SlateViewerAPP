// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================================
PathTracingLambert.usf: Lambertian BRDF sampling functions
===============================================================================================*/
#pragma once

FMaterialSample Lambert_SampleMaterial(
	FMaterialClosestHitPayload Payload,
	float4 RandSample)
{
	float3 N_World = GetWorldNormal(Payload);

	float4 SampledValue = CosineSampleHemisphere(RandSample.xy);

	return CreateMaterialSample(TangentToWorld(SampledValue.xyz, N_World), GetBaseColor(Payload), SampledValue.w, 1.0, 1.0);
}

FMaterialEval Lambert_EvalMaterial(
	float3 OutgoingDirection,
	FMaterialClosestHitPayload Payload
)
{
	float3 N_World = GetWorldNormal(Payload);
	float NoL = saturate(dot(N_World, OutgoingDirection));

	return CreateMaterialEval(GetBaseColor(Payload), NoL / PI);
}


FMaterialSample Simplified_SampleMaterial(
	FMaterialClosestHitPayload Payload,
	float4 RandSample)
{
	float3 N_World = GetWorldNormal(Payload);

	float3 FrontColor = GetBaseColor(Payload);
	float3 BackColor = Payload.ShadingModelID == SHADINGMODELID_TWOSIDED_FOLIAGE ? GetSubsurfaceColor(Payload) : 0.0;

	float4 SampledValue = CosineSampleHemisphere(RandSample.xy);

	float TransmissionProb = LobeSelectionProb(BackColor, FrontColor);
	bool bDoTransmission = RandSample.z < TransmissionProb;
	float3 Weight = bDoTransmission ? BackColor / TransmissionProb : FrontColor / (1 - TransmissionProb);
	float Pdf = SampledValue.w * (bDoTransmission ? TransmissionProb : 1.0 - TransmissionProb);

	return CreateMaterialSample(TangentToWorld(SampledValue.xyz, N_World * (bDoTransmission ? -1.0 : 1.0)), Weight, Pdf, 1.0, 1.0);
}

FMaterialEval Simplified_EvalMaterial(
	float3 OutgoingDirection,
	FMaterialClosestHitPayload Payload
)
{
	float3 N_World = GetWorldNormal(Payload);
	float NoL = dot(N_World, OutgoingDirection);

	float3 FrontColor = GetBaseColor(Payload);
	float3 BackColor = Payload.ShadingModelID == SHADINGMODELID_TWOSIDED_FOLIAGE ? GetSubsurfaceColor(Payload) : 0.0;
	float TransmissionProb = LobeSelectionProb(BackColor, FrontColor);

	float3 Weight = NoL < 0.0 ? BackColor : FrontColor;
	float Pdf = NoL < 0.0 ? TransmissionProb : 1.0 - TransmissionProb;
	if (Pdf > 0.0)
	{
		Weight /= Pdf;
	}
	return CreateMaterialEval(Weight, Pdf * saturate(abs(NoL)) / PI);
}
