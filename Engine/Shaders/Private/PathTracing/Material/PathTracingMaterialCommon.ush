// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================================
PathTracingMaterialCommon.usf: Brdf utility functions
===============================================================================================*/

#pragma once

#include "../PathTracingCommon.ush"
#include "/Engine/Private/BRDF.ush"

float3 GetMaterialEmission(FMaterialClosestHitPayload HitInfo)
{
	return HitInfo.Radiance;
}

float3 GetBaseColor(FMaterialClosestHitPayload HitInfo)
{
	return HitInfo.BaseColor;
}

float3 GetDiffuseColor(FMaterialClosestHitPayload HitInfo)
{
	return HitInfo.DiffuseColor;
}

float3 GetSpecularColor(FMaterialClosestHitPayload HitInfo)
{
	return HitInfo.SpecularColor;
}

float GetRoughness(FMaterialClosestHitPayload HitInfo)
{
	return HitInfo.Roughness;
}

float GetMetallic(FMaterialClosestHitPayload HitInfo)
{
	return HitInfo.Metallic;
}

float GetClearCoat(FMaterialClosestHitPayload HitInfo)
{
	return HitInfo.CustomData.x;
}

float GetClearCoatRoughness(FMaterialClosestHitPayload HitInfo)
{
	return max(HitInfo.CustomData.y, 0.02);
}

float SetClearCoatRoughness(inout FMaterialClosestHitPayload HitInfo, float Roughness)
{
	return HitInfo.CustomData.y = Roughness;
}


float3 GetClearCoatBottomNormal(FMaterialClosestHitPayload HitInfo)
{
#ifdef PATH_TRACING
	#if CLEAR_COAT_BOTTOM_NORMAL
	// Functionally inverse of behavior in RayTracingMaterialHitShader.usf
	float2 oct2 = UnitVectorToOctahedron(HitInfo.WorldNormal);
	float2 oct3 = float2(HitInfo.CustomData.a, HitInfo.CustomData.z);
	float2 oct1 = (oct3 - (128.0 / 255.0)) * 2.0 + oct2;

	return OctahedronToUnitVector(oct1);
	#endif
#endif
	return HitInfo.WorldNormal;
}

float GetClearCoatThickness(FMaterialClosestHitPayload HitInfo)
{
	// Assume normalized thickness
	return 1.0;
}

float3 GetSubsurfaceColor(FMaterialClosestHitPayload HitInfo)
{
	return HitInfo.CustomData.xyz;
}

void SetSubsurfaceColor(inout FMaterialClosestHitPayload HitInfo, float3 SSSColor)
{
	HitInfo.CustomData.xyz = SSSColor;
}

// Steal an unused field for storing this information
float3 GetSubsurfaceRadius(FMaterialClosestHitPayload HitInfo)
{
	return HitInfo.IndirectIrradiance;
}

void SetSubsurfaceRadius(inout FMaterialClosestHitPayload HitInfo, float3 SSSRadius)
{
	HitInfo.IndirectIrradiance = SSSRadius;
}

// Steal an unused float3 (the only material with dual specular does not support anisotropy)
// Data is encoded as (x: roughness 0, y: roughness 1, z: roughness mix)
float3 GetDualRoughnessSpecular(FMaterialClosestHitPayload HitInfo)
{
	return float3(HitInfo.WorldTangent);
}

void SetDualRoughnessSpecular(inout FMaterialClosestHitPayload HitInfo, float3 RoughnessData)
{
	// store data in unused field and compute average roughness
	HitInfo.WorldTangent = RoughnessData;
	HitInfo.Roughness = lerp(RoughnessData.x, RoughnessData.y, RoughnessData.z);
}

float3 GetWorldNormal(FMaterialClosestHitPayload HitInfo)
{
	return HitInfo.WorldNormal;
}

bool IsPureSpecularTransmission(FMaterialClosestHitPayload HitInfo)
{
	return HitInfo.BlendingMode > RAY_TRACING_BLEND_MODE_OPAQUE;
}

bool IsLambert(FMaterialClosestHitPayload HitInfo)
{
	return GetRoughness(HitInfo) > GLOSSY_MAX_ROUGHNESS;
}

bool IsUnlitMaterial(FMaterialClosestHitPayload HitInfo)
{
	return HitInfo.ShadingModelID == SHADINGMODELID_UNLIT;
}

bool IsDefaultLitMaterial(FMaterialClosestHitPayload HitInfo)
{
	return HitInfo.ShadingModelID == SHADINGMODELID_DEFAULT_LIT;
}

bool IsClearCoatMaterial(FMaterialClosestHitPayload HitInfo)
{
	return HitInfo.ShadingModelID == SHADINGMODELID_CLEAR_COAT;
}

bool IsTwoSidedFoliageMaterial(FMaterialClosestHitPayload HitInfo)
{
	return HitInfo.ShadingModelID == SHADINGMODELID_TWOSIDED_FOLIAGE;
}

bool IsMaterialTransmissive(FMaterialClosestHitPayload HitInfo)
{
	return HitInfo.ShadingModelID == SHADINGMODELID_TWOSIDED_FOLIAGE ||
		   (HitInfo.BlendingMode == RAY_TRACING_BLEND_MODE_TRANSLUCENT && HitInfo.Roughness != 0 && HitInfo.Opacity < 1);
}

bool IsSubsurfaceMaterial(FMaterialClosestHitPayload HitInfo)
{
	return HitInfo.ShadingModelID == SHADINGMODELID_SUBSURFACE ||
		   HitInfo.ShadingModelID == SHADINGMODELID_PREINTEGRATED_SKIN ||
		   HitInfo.ShadingModelID == SHADINGMODELID_SUBSURFACE_PROFILE;
}

// Given two lobes that will roughly contribute colors A and B to the total (estimated for example using directional albedo)
// return the probability of choosing lobe A
float LobeSelectionProb(float3 A, float3 B)
{
	const float SumA = A.x + A.y + A.z;
	const float SumB = B.x + B.y + B.z;
	return SumA / (SumA + SumB + 1e-6);
}

// Takes as input the sample weight and pdf for a certain lobe of a mixed model, together with the probability of picking that lobe
// This function then updates a running total Weight and Pdf value that represents the overall contribution of the BxDF
// This function should be called when a BxDF is made up of multiple lobes combined with a sum to correctly account for the probability
// of sampling directions via all lobes.
// NOTE: this function also contains special logic to handle cases with infinite pdfs cleanly
void AddLobeWithMIS(inout float3 Weight, inout float Pdf, float3 LobeWeight, float LobePdf, float LobeProb)
{
	const float MinLobeProb = 1.1754943508e-38; // smallest normal float
	if (LobeProb > MinLobeProb)
	{
		LobePdf *= LobeProb;
		LobeWeight *= 1 / LobeProb;

		// See discussion in MISWeightRobust for why this is better than LobePdf / (Pdf + LobePdf)
		float MISWeight;
		if (Pdf < LobePdf)
			MISWeight = 1 / (1 + Pdf / LobePdf);
		else if (LobePdf < Pdf)
			MISWeight = 1 - 1 / (1 + LobePdf / Pdf);
		else
			MISWeight = 0.5f; // avoid (rare) inf/inf

		Weight = lerp(Weight, LobeWeight, MISWeight);
		Pdf += LobePdf;
	}
}

// The following structs are used as return types for the Eval/Sample methods

struct FMaterialSample
{
	float3 Direction;
	float3 Weight;
	float Pdf;
	float PositionBiasSign;
	float Roughness;
};

FMaterialSample NullMaterialSample()
{
	// return a zero initialized sample, for cases where we couldn't sample the material (such as rays below the horizon, etc..)
	return (FMaterialSample)0;
}

FMaterialSample CreateMaterialSample(float3 Direction, float3 Weight, float Pdf, float PositionBiasSign, float Roughness)
{
	FMaterialSample Result;
	Result.Direction = Direction;
	Result.Weight = Weight;
	Result.Pdf = Pdf;
	Result.PositionBiasSign = PositionBiasSign;
	Result.Roughness = Roughness;
	return Result;
}

struct FMaterialEval
{
	float3 Weight;
	float Pdf;
};

FMaterialEval NullMaterialEval()
{
	return (FMaterialEval)0;
}

FMaterialEval CreateMaterialEval(float3 Weight, float Pdf)
{
	FMaterialEval Result;
	Result.Weight = Weight;
	Result.Pdf = Pdf;
	return Result;
}
